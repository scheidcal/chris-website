{"version":3,"sources":["components/Image/Image.jsx","components/ImageContainer/ImageContainer.jsx","Interfaces/images/if_images.jsx","assets/setDesignImages/image001.jpg","assets/setDesignImages/image01.jpeg","assets/setDesignImages/image02.jpeg","assets/main-images/1/800.jpg","assets/main-images/2/800.jpg","components/NavBar/NavBar.js","components/SetDesign/SetDesign.jsx","components/App/App.jsx","serviceWorker.js","index.js"],"names":["Image","props","className","offset","throttle","height","src","alt","width","ImageContainer","state","imageCount","images","imageSrcMap","length","i","temp","push","imageArray","this","key","id","Component","srcInterface","urlBase","setDesignBaseURL","artDirBaseUrl","srcMapSet","srcMapArt","module","exports","NavBar","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","href","SetDesign","setDesignImage1","setDesignImage2","setDesignImage3","artDirection","lazy","resume","App","fallback","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.06ca59a6.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Image.css\";\n\n/*\n Lazyload code is under MIT Licence\n https://www.npmjs.com/package/react-lazy-load\n https://github.com/loktar00/react-lazy-load\n\nAuthor: Jason loktar00 https://github.com/loktar00\n\nThe MIT License (MIT)\n\nCopyright (c) 2015 Jason\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n*/\nimport LazyLoad from \"react-lazy-load\";\n\n// import { forceCheck } from \"react-lazyload\";\n\nfunction Image(props) {\n  return (\n    <div className=\"row min-vw-50\">\n      <div className=\"col mt-2 mb-5\">\n        <LazyLoad\n          offset={10}\n          throttle={1}\n          // onContentVisible={() => console.log(\"loaded image\" + props.id)}\n          height=\"700px\"\n          // height=\"100%\"\n        >\n          <img\n            className=\"img-fluid\"\n            src={props.src}\n            alt=\"Alt text here\"\n            width=\"1300\"\n            height=\"600\"\n          />\n        </LazyLoad>\n      </div>\n    </div>\n  );\n}\n\nexport default Image;\n","// import React from \"../../../node_modules/react\";\nimport React, { Component } from \"react\";\nimport \"./ImageContainer.css\";\nimport Image from \"../Image/Image\";\n\n// The first 2 or 3 images should be imported\n// All other images should be fetched from the cdn\n// Using https://www.npmjs.com/package/react-lazy-load-image-component\n\nclass ImageContainer extends Component {\n  state = {\n    imageCount: -1,\n    images: []\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state.imageCount = props.imageSrcMap.length;\n\n    let images = [];\n    for (let i = 0; i < this.state.imageCount; i++) {\n      let temp = {};\n      temp.src = props.imageSrcMap[i];\n      images.push(temp);\n    }\n    this.state.images = images;\n  }\n\n  render() {\n    let imageArray = [];\n    for (let i = 0; i < this.state.images.length; i++) {\n      imageArray.push(\n        <Image key={i + 3} id={i + 3} src={this.state.images[i].src} />\n      );\n    }\n\n    return <div>{imageArray}</div>;\n  }\n}\n\nexport default ImageContainer;\n","import image1 from \"../../assets/main-images/1/800.jpg\";\nimport image2 from \"../../assets/main-images/2/800.jpg\";\n\nclass srcInterface {\n  urlBase = \"https://res.cloudinary.com/waterscheiddesign/\";\n  setDesignBaseURL =\n    \"https://res.cloudinary.com/waterscheiddesign/image/upload/v1568643390/Set%20Design%20%28main%20page%29/\";\n\n  artDirBaseUrl =\n    \"https://res.cloudinary.com/waterscheiddesign/image/upload/v1566416248/Art%20Director/\";\n\n  // This is to display images from cloudinary\n  srcMapSet = [\n    this.setDesignBaseURL + \"image03.jpg\",\n    this.setDesignBaseURL + \"image04.jpg\",\n    this.setDesignBaseURL + \"image05.jpg\",\n    this.setDesignBaseURL + \"image06.jpg\",\n    this.setDesignBaseURL + \"image07.jpg\", //no pages\n    this.setDesignBaseURL + \"image08.jpg\",\n    this.setDesignBaseURL + \"image09.jpg\",\n    this.setDesignBaseURL + \"image10.jpg\",\n    this.setDesignBaseURL + \"image11.jpg\",\n    this.setDesignBaseURL + \"image12.jpg\",\n    this.setDesignBaseURL + \"image13.jpg\",\n    this.setDesignBaseURL + \"image14.jpg\",\n    this.setDesignBaseURL + \"image15.jpg\",\n    this.setDesignBaseURL + \"image16.jpg\",\n    this.setDesignBaseURL + \"image17.jpg\",\n    this.setDesignBaseURL + \"image18.jpg\",\n    this.setDesignBaseURL + \"image19.jpg\",\n    this.setDesignBaseURL + \"image20.jpg\",\n    this.setDesignBaseURL + \"image21.jpg\",\n    this.setDesignBaseURL + \"image22.jpg\",\n    this.setDesignBaseURL + \"image23.jpg\",\n    this.setDesignBaseURL + \"image24.jpg\",\n    this.setDesignBaseURL + \"image25.jpg\",\n    this.setDesignBaseURL + \"image26.jpg\",\n    this.setDesignBaseURL + \"image27.jpg\",\n    this.setDesignBaseURL + \"image28.jpg\",\n    this.setDesignBaseURL + \"image29.jpg\",\n    this.setDesignBaseURL + \"image30.jpg\"\n  ];\n\n  // This is to display images from the computer\n  // For testing use this\n  // srcMapSet = [\n  //   image1,\n  //   image2,\n  //   image1,\n  //   image2,\n  //   image1,\n  //   image2,\n  //   image1,\n  //   image2,\n  //   image1,\n  //   image2,\n  //   image1,\n  //   image2\n  // ];\n\n  // This is to display images from cloudinary\n  srcMapArt = [\n    this.artDirBaseUrl + \"ADimage04\",\n    this.artDirBaseUrl + \"ADimage05\",\n    this.artDirBaseUrl + \"ADimage06\",\n    this.artDirBaseUrl + \"ADimage07\"\n  ];\n\n  // This is to display images from the computer\n  // For testing use this\n  // srcMapArtTesting = [image2, image2, image2, image2, image2, image2];\n}\nexport default srcInterface;\n","module.exports = __webpack_public_path__ + \"static/media/image001.96c29858.jpg\";","module.exports = __webpack_public_path__ + \"static/media/image01.216394bd.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/image02.c2b7200b.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/800.b4345a0f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/800.3f266d8d.jpg\";","import React from \"../../../node_modules/react\";\nimport \"./NavBar.css\";\n\nfunction NavBar() {\n  return (\n    <div>\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarNavAltMarkup\"\n          aria-controls=\"navbarNavAltMarkup\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n          <div className=\"navbar-nav\">\n            <a className=\"navbar-brand\" href=\"/SetDesign\">\n              Set Design\n            </a>\n            <a className=\"navbar-brand\" href=\"/ArtDirection\">\n              Art Direction\n            </a>\n            <a className=\"navbar-brand\" href=\"/Resume\">\n              Resume\n            </a>\n          </div>\n        </div>\n        {/* <div>\n          <h1>Chris Scheid </h1>\n          <h3>WaterScheid.la@gmail.com</h3>\n          <h3>(818) 963-0675</h3>\n        </div> */}\n        {/* <span class=\"navbar-text navbar-light bg-light\"> */}\n        <span className=\"navbar-text navbar-light bg-light\">\n          <h2>Chris Scheid</h2> <div>Set Design & Art Direction</div>\n          <div>cscheid.design@gmail.com</div>\n          <div> (818) 963-0675</div>\n        </span>\n      </nav>\n    </div>\n  );\n}\n\nexport default NavBar;\n","// import React from \"../../../node_modules/react\";\nimport React, { Component } from \"react\";\nimport \"./SetDesign.css\";\nimport ImageContainer from \"../ImageContainer/ImageContainer\";\nimport Image from \"../Image/Image\";\n\nimport srcInterface from \"../../Interfaces/images/if_images\";\n\nimport setDesignImage1 from \"../../assets/setDesignImages/image001.jpg\";\nimport setDesignImage2 from \"../../assets/setDesignImages/image01.jpeg\";\nimport setDesignImage3 from \"../../assets/setDesignImages/image02.jpeg\";\n\nclass SetDesign extends Component {\n  state = {};\n\n  render() {\n    return (\n      <section className=\"text-center body-content container\">\n        <Image key={0} id={0} src={setDesignImage1}></Image>\n        <Image key={1} id={1} src={setDesignImage2}></Image>\n        <Image key={2} id={2} src={setDesignImage3}></Image>\n        <div>\n          <ImageContainer imageSrcMap={new srcInterface().srcMapSet} />\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default SetDesign;\n","import React, { Component, Suspense, lazy } from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\n\n// import ImageContainer from \"../ImageContainer/ImageContainer\";\nimport NavBar from \"../NavBar/NavBar\";\n// import Resume from \"../Resume/Resume\";\n// import ArtDirection from \"../ArtDirection/ArtDirection\";\nimport SetDesign from \"../SetDesign/SetDesign\";\n\nconst artDirection = lazy(() => import(\"../ArtDirection/ArtDirection\"));\nconst resume = lazy(() => import(\"../Resume/Resume\"));\n\nclass App extends Component {\n  state = {};\n\n  render() {\n    return (\n      <Router>\n        <NavBar />\n        <Suspense fallback={<div>Loading...</div>}>\n          <Route path=\"/\" component={SetDesign} />\n          <Route path=\"/SetDesign\" component={SetDesign} />\n          <Route path=\"/ArtDirection\" component={artDirection} />\n          <Route path=\"/Resume\" component={resume} />\n        </Suspense>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}